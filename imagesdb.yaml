openapi: 3.1.0
info:
  title: Images DB
  description: |
    This is the Images DB API based on the OpenAPI 3.1.0 specification.  
    Users are able to upload their images on the server and retrieve it.
  contact:
    name: Firas
    email: firasfj17@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:4000
tags:
  - name: auth
    description: For authentication of users
  - name: users
    description: Operations to users
  - name: images
    description: Operations to images
  - name: me
    description: Operations to currently signed in account

security:
  - jwt_auth: []
  
paths:
  /auth/register:
    post:
      security: []
      tags:
        - auth
      summary: Create a new user
      description: Create a new user with a username and password
      operationId: register
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - password
              properties:
                userName:
                  type: string
                  maxLength: 15
                  examples: [jack]
                password:
                  type: string
                  maxLength: 30
                  examples: [1234]
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: number
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'

        '400':
          description: Invalid input
        '409':
          description: Username already exists
        '500':
          description: Failed to register.
      
  /auth/signin:
    post:
      security: []
      tags:
        - auth
      summary: Sign in
      description: Sign in with a username and password
      operationId: signIn
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - password
              properties:
                userName:
                  type: string
                  maxLength: 15
                  examples: [jack]
                password:
                  type: string
                  maxLength: 30
                  examples: [1234]
      responses:
        '200':
          description: Successfully logged in
          headers:
            Set-Cookie:
                description: The JWT is set in a cookie 'jwt'
                schema: 
                  type: string
                  examples: [jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIzIiwiaWF0IjoxNzA2ODUzMTg0LCJleHAiOjE3MzgzODkxODR9.7wKSE74BvwGiPqzPNK68F8msGnlG_4VpJVTC_ZYe_lo; Path=/; HttpOnly]
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  jwtToken:
                    type: string
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          description: Your password is incorrect
        '404':
          description: Such a user does not exist
        '500':
          description: Error during logging in
  /images:
    post:
      security:
        - jwt_auth: []  
      tags:
        - images
      summary: Upload an image
      description: Upload an image providing its URL, title, description, and associated tags
      operationId: uploadImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imageId:
                    type: number
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to upload
    get:
      security:
        - jwt_auth: []  
      tags:
        - images
      summary: Retrieve a batch of images
      description: Retrieve a batch of images with pagination and sorting
      operationId: getImages
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of items to skip
        - in: query
          name: sortBy
          schema:
            type: string
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
          description: Sort order (ASC or DESC)
        - in: query
          name: showDeleted
          schema:
            type: string
          description: Whether to include deleted items
        - in: query
          name: showFlagged
          schema:
            type: string
          description: Whether to include flagged items
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          description: Comma-separated list of tags
        - in: query
          name: searchQuery
          schema:
            type: string
          description: Search query
        - in: query
          name: searchColumn
          schema:
            type: string
          description: Column to search in
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  fetched:
                    type: integer
                  data:
                    $ref: '#/components/schemas/ImageArray'
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
                  totalImages:
                    type: integer
                  totalNeededImages:
                    type: integer
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No images found
        '500':
          description: Failed to fetch images
    delete:
      security:
        - jwt_auth: []  
      tags:
        - images
      summary: Delete all your images
      description: Delete all of the images the signed-in user has uploaded
      operationId: deleteImages
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deletedCount:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No images found to delete
        '500':
          description: Failed to delete all images

  /images/{imageId}:
    get:
      tags:
        - images
      summary: Retrieve image by ID
      description: Retrieve an image by its ID
      operationId: getImageById
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
          description: ID of the image to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Image'
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Unauthorized to view this image
        '404':
          description: Image not found
        '500':
          description: Failed to fetch image
    delete:
      tags:
        - images
      summary: Delete image by ID
      description: Delete an image by its ID
      operationId: deleteImageById
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the image to delete
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Unauthorized to delete this image
        '404':
          description: Image not found
        '500':
          description: Failed to delete the image
    patch: 
      tags:
        - images
      summary: Partially update image
      description: Partially update an image by its ID
      operationId: partiallyUpdateImage
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
          description: ID of the image to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
                ownerId:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                isFlagged:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
                destroyTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Unauthorized to update this image
        '404':
          description: Image not found
        '500':
          description: Failed to update the image
    put:
      security:
        - jwt_auth: []  
      tags:
        - images
      summary: Update an image
      description: Completely update an image by its ID
      operationId: updateImage
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
          description: ID of the image to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
                ownerId:
                  type: integer
                tags:
                  type: array
                  items:
                    type: string
                isFlagged:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
                destroyTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  links:
                    $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Only an admin can send the PUT request
        '404':
          description: Image not found
        '500':
          description: Failed to update the image

  /users:
    get:
      security:
        - jwt_auth: []  
      tags:
        - users
      summary: Retrieve a batch of users
      description: Retrieve a batch of users with pagination and sorting
      operationId: fetchBatchOfUsers
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Number of users to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of users to skip
        - in: query
          name: sortBy
          schema:
            type: string
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
          description: Sort order (ASC or DESC)
        - in: query
          name: showDeleted
          schema:
            type: string
          description: Whether to include deleted items
        - in: query
          name: searchQuery
          schema:
            type: string
          description: Search query
        - in: query
          name: searchColumn
          schema:
            type: string
          description: Column to search in
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  fetched:
                    type: integer
                  data:
                    $ref: '#/components/schemas/UserArray'
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
                  totalUsers:
                    type: integer
                  totalNeededUsers:
                    type: integer
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Only the admin can use this route
        '404':
          description: No users found
        '500':
          description: Failed to fetch users

  /users/{userId}:
    get:   
      tags:
        - users
      summary: Retrieve user by ID
      description: Retrieve a user by their ID
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
        - in: query
          name: showDeleted
          schema:
            type: string
          description: Whether to include deleted items
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: Invalid input
        '403':
          description: Only the admin can use this route
        '404':
          description: User not found
        '500':
          description: Failed to fetch
    patch:
      tags:
        - users
      summary: Partially update a user by ID
      description: Partially update a user's information by specifying the fields to update
      operationId: partiallyUpdateUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                userName:
                  type: string
                  maxLength: 15
                password:
                  type: string
                isAdmin:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
                destroyTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Only the admin can update the users
        '404':
          description: User not found
        '500':
          description: Failed to update user

    put:
      security:
        - jwt_auth: []  
      tags:
        - users
      summary: Update a user by ID
      description: Update a user's information by providing all fields
      operationId: updateUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to update

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                userName:
                  type: string
                  maxLength: 15
                password:
                  type: string
                isAdmin:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
                destroyTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Only the admin can update the users
        '404':
          description: User not found
        '500':
          description: Failed to update user

    delete:
      tags:
        - users
      summary: Delete a user by ID
      description: Delete a user by providing their ID
      operationId: deleteUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Only the admin can delete the other users
        '404':
          description: User not found
        '500':
          description: Failed to delete user
  /me:
      get:
        tags:
          - me
        summary: Get your details
        description: Get your account details such as id, username, date created at, etc
        operationId: getYourDetails
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    data:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the user
                        userName:
                          type: string
                          description: The username of the user
                        isAdmin: 
                          type: boolean
                          description: Whether the user is an admin
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the user account was created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: The date and time when the user account was last modified
                        destroyTime:
                          type: string
                          format: date-time
                          description: The date and time if the account was deleted
                        imagesUploaded:
                          type: array
                          items: 
                            type: integer
                          description: An array of the id's of the images the user has uploaded
                      required:
                        - id
                        - userName
                        - isAdmin
                        - createdAt
                        - modifiedAt
                        - destroyTime
                        - imagesUploaded
                    links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            description: User not found
          '500':
            description: Failed to fetch
      patch:
        tags:
          - me
        summary: Update user details
        description: |
          Update the account details of the currently signed-in user i.e. their username and password. Ensure to provide either a new username or password in the request body.
        operationId: updateUserDetails
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userName:
                    type: string
                  password:
                    type: string
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
          '400':
            description: Invalid input
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            description: User not found
          '409':
            description: This username already exists!
          '500':
            description: Failed to fetch
      delete:
        tags:
          - me
        summary: Delete your account
        description: The currently signed-in account will be deleted
        operationId: deleteUserDetails
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    links:
                      $ref: '#/components/schemas/HATEOASLinkArray'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '500':
            description: Failed to delete

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          examples: [10]
        userName:
          type: string
          examples: [thomas]
        isAdmin:
          type: boolean
          examples: [false]
        createdAt:
          type: string
          format: date-time
          examples: [2024-01-01 05:30:00+05:30]
        updatedAt:
          type: string
          format: date-time
          examples: [2024-01-01 05:30:00+05:30]
        destroyTime:
          type: string
          format: date-time
      required:
        - id
        - userName
    Image:
      type: object
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
        title:
          type: string
          maxLength: 65
        description:
          type: string
        ownerId:
          type: integer
        tags:
          type: array
          items:
            type: string
        isFlagged:
          type: boolean
      required:
        - url
        - title
    UserArray:
      description: Array of users
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    ImageArray:
      description: Array of Images
      content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Image'
    HATEOASLink:
      type: object
      properties:
        rel:
          type: string
        method:
          type: string
        href:
          type: string
        description:
          type: boolean
    HATEOASLinkArray:
        description: Array of HATEOAS links
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HATEOASLink'

  responses:
      UnauthorizedError:
        description: Token not provided or invalid
  securitySchemes:
    jwt_auth:         
      type: apiKey
      in: cookie
      name: jwt 
